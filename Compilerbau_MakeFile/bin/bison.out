Terminals unused in grammar

   COLON
   END_OF_FILE
   SHIFT_RIGHT
   SHIFT_LEFT
   UNARY_PLUS


State 116 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program_element_list

    2 program_element_list: program_element_list program_element
    3                     | program_element

    4 program_element: declaration SEMICOLON
    5                | function_definition
    6                | SEMICOLON

    7 type: INT
    8     | VOID

    9 declaration: declaration COMMA declaration_element
   10            | type declaration_element

   11 declaration_element: identifier_declaration
   12                    | function_header

   13 identifier_declaration: identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE
   14                       | ID

   15 function_definition: type function_header BRACE_OPEN stmt_list BRACE_CLOSE

   16 function_header: function_prefix PARA_CLOSE

   17 function_prefix: function_signature
   18                | function_signature_parameters

   19 function_signature: identifier_declaration PARA_OPEN

   20 function_signature_parameters: function_signature_parameters COMMA function_parameter_element
   21                              | function_signature function_parameter_element

   22 function_parameter_element: type identifier_declaration

   23 stmt_list: /* empty */
   24          | stmt_list stmt

   25 stmt: stmt_block
   26     | declaration SEMICOLON
   27     | expression SEMICOLON
   28     | stmt_conditional
   29     | stmt_loop
   30     | RETURN expression SEMICOLON
   31     | RETURN SEMICOLON
   32     | SEMICOLON

   33 stmt_block: BRACE_OPEN stmt_list BRACE_CLOSE

   34 stmt_conditional: IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt

   36 stmt_loop: WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON

   38 expression: expression ASSIGN expression
   39           | expression LOGICAL_OR expression
   40           | expression LOGICAL_AND expression
   41           | LOGICAL_NOT expression
   42           | expression EQ expression
   43           | expression NE expression
   44           | expression LS expression
   45           | expression LSEQ expression
   46           | expression GTEQ expression
   47           | expression GT expression
   48           | expression PLUS expression
   49           | expression MINUS expression
   50           | expression MUL expression
   51           | expression DIV expression
   52           | expression MOD expression
   53           | MINUS expression
   54           | ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | PARA_OPEN expression PARA_CLOSE
   56           | function_call PARA_CLOSE
   57           | primary

   58 primary: NUM
   59        | ID

   60 function_call: ID PARA_OPEN
   61              | function_call_parameters

   62 function_call_parameters: function_call_parameters COMMA expression
   63                         | ID PARA_OPEN expression


Terminals, with rules where they appear

$end (0) 0
error (256)
DO (258) 37
WHILE (259) 36 37
IF (260) 34 35
ELSE (261) 35
INT (262) 7
VOID (263) 8
RETURN (264) 30 31
COLON (265)
COMMA (266) 9 20 62
SEMICOLON (267) 4 6 26 27 30 31 32 37
BRACE_OPEN (268) 15 33
BRACE_CLOSE (269) 15 33
END_OF_FILE (270)
ID (271) 14 54 59 60 63
NUM (272) 58
ASSIGN (273) 38
LOGICAL_OR (274) 39
LOGICAL_AND (275) 40
NE (276) 43
EQ (277) 42
GT (278) 47
GTEQ (279) 46
LSEQ (280) 45
LS (281) 44
SHIFT_RIGHT (282)
SHIFT_LEFT (283)
MINUS (284) 49 53
PLUS (285) 48
MOD (286) 52
DIV (287) 51
MUL (288) 50
UNARY_PLUS (289)
UNARY_MINUS (290)
LOGICAL_NOT (291) 41
PARA_CLOSE (292) 16 34 35 36 37 55 56
PARA_OPEN (293) 19 34 35 36 37 55 60 63
BRACKET_CLOSE (294) 13 54
BRACKET_OPEN (295) 13 54


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
program (42)
    on left: 1, on right: 0
program_element_list (43)
    on left: 2 3, on right: 1 2
program_element (44)
    on left: 4 5 6, on right: 2 3
type (45)
    on left: 7 8, on right: 10 15 22
declaration (46)
    on left: 9 10, on right: 4 9 26
declaration_element (47)
    on left: 11 12, on right: 9 10
identifier_declaration (48)
    on left: 13 14, on right: 11 13 19 22
function_definition (49)
    on left: 15, on right: 5
function_header (50)
    on left: 16, on right: 12 15
function_prefix (51)
    on left: 17 18, on right: 16
function_signature (52)
    on left: 19, on right: 17 21
function_signature_parameters (53)
    on left: 20 21, on right: 18 20
function_parameter_element (54)
    on left: 22, on right: 20 21
stmt_list (55)
    on left: 23 24, on right: 15 24 33
stmt (56)
    on left: 25 26 27 28 29 30 31 32, on right: 24 34 35 36 37
stmt_block (57)
    on left: 33, on right: 25
stmt_conditional (58)
    on left: 34 35, on right: 28
stmt_loop (59)
    on left: 36 37, on right: 29
expression (60)
    on left: 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55
    56 57, on right: 13 27 30 34 35 36 37 38 39 40 41 42 43 44 45 46
    47 48 49 50 51 52 53 55 62 63
primary (61)
    on left: 58 59, on right: 54 57
function_call (62)
    on left: 60 61, on right: 56
function_call_parameters (63)
    on left: 62 63, on right: 61 62


state 0

    0 $accept: . program $end
    1 program: . program_element_list
    2 program_element_list: . program_element_list program_element
    3                     | . program_element
    4 program_element: . declaration SEMICOLON
    5                | . function_definition
    6                | . SEMICOLON
    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   15 function_definition: . type function_header BRACE_OPEN stmt_list BRACE_CLOSE

    INT        shift, and go to state 1
    VOID       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    program               go to state 4
    program_element_list  go to state 5
    program_element       go to state 6
    type                  go to state 7
    declaration           go to state 8
    function_definition   go to state 9


state 1

    7 type: INT .

    $default  reduce using rule 7 (type)


state 2

    8 type: VOID .

    $default  reduce using rule 8 (type)


state 3

    6 program_element: SEMICOLON .

    $default  reduce using rule 6 (program_element)


state 4

    0 $accept: program . $end

    $end  shift, and go to state 10


state 5

    1 program: program_element_list .  [$end]
    2 program_element_list: program_element_list . program_element
    4 program_element: . declaration SEMICOLON
    5                | . function_definition
    6                | . SEMICOLON
    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   15 function_definition: . type function_header BRACE_OPEN stmt_list BRACE_CLOSE

    INT        shift, and go to state 1
    VOID       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    $default  reduce using rule 1 (program)

    program_element      go to state 11
    type                 go to state 7
    declaration          go to state 8
    function_definition  go to state 9


state 6

    3 program_element_list: program_element .

    $default  reduce using rule 3 (program_element_list)


state 7

   10 declaration: type . declaration_element
   11 declaration_element: . identifier_declaration
   12                    | . function_header
   13 identifier_declaration: . identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE
   14                       | . ID
   15 function_definition: type . function_header BRACE_OPEN stmt_list BRACE_CLOSE
   16 function_header: . function_prefix PARA_CLOSE
   17 function_prefix: . function_signature
   18                | . function_signature_parameters
   19 function_signature: . identifier_declaration PARA_OPEN
   20 function_signature_parameters: . function_signature_parameters COMMA function_parameter_element
   21                              | . function_signature function_parameter_element

    ID  shift, and go to state 12

    declaration_element            go to state 13
    identifier_declaration         go to state 14
    function_header                go to state 15
    function_prefix                go to state 16
    function_signature             go to state 17
    function_signature_parameters  go to state 18


state 8

    4 program_element: declaration . SEMICOLON
    9 declaration: declaration . COMMA declaration_element

    COMMA      shift, and go to state 19
    SEMICOLON  shift, and go to state 20


state 9

    5 program_element: function_definition .

    $default  reduce using rule 5 (program_element)


state 10

    0 $accept: program $end .

    $default  accept


state 11

    2 program_element_list: program_element_list program_element .

    $default  reduce using rule 2 (program_element_list)


state 12

   14 identifier_declaration: ID .

    $default  reduce using rule 14 (identifier_declaration)


state 13

   10 declaration: type declaration_element .

    $default  reduce using rule 10 (declaration)


state 14

   11 declaration_element: identifier_declaration .  [COMMA, SEMICOLON]
   13 identifier_declaration: identifier_declaration . BRACKET_OPEN expression BRACKET_CLOSE
   19 function_signature: identifier_declaration . PARA_OPEN

    PARA_OPEN     shift, and go to state 21
    BRACKET_OPEN  shift, and go to state 22

    $default  reduce using rule 11 (declaration_element)


state 15

   12 declaration_element: function_header .  [COMMA, SEMICOLON]
   15 function_definition: type function_header . BRACE_OPEN stmt_list BRACE_CLOSE

    BRACE_OPEN  shift, and go to state 23

    $default  reduce using rule 12 (declaration_element)


state 16

   16 function_header: function_prefix . PARA_CLOSE

    PARA_CLOSE  shift, and go to state 24


state 17

    7 type: . INT
    8     | . VOID
   17 function_prefix: function_signature .  [PARA_CLOSE]
   21 function_signature_parameters: function_signature . function_parameter_element
   22 function_parameter_element: . type identifier_declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 17 (function_prefix)

    type                        go to state 25
    function_parameter_element  go to state 26


state 18

   18 function_prefix: function_signature_parameters .  [PARA_CLOSE]
   20 function_signature_parameters: function_signature_parameters . COMMA function_parameter_element

    COMMA  shift, and go to state 27

    $default  reduce using rule 18 (function_prefix)


state 19

    9 declaration: declaration COMMA . declaration_element
   11 declaration_element: . identifier_declaration
   12                    | . function_header
   13 identifier_declaration: . identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE
   14                       | . ID
   16 function_header: . function_prefix PARA_CLOSE
   17 function_prefix: . function_signature
   18                | . function_signature_parameters
   19 function_signature: . identifier_declaration PARA_OPEN
   20 function_signature_parameters: . function_signature_parameters COMMA function_parameter_element
   21                              | . function_signature function_parameter_element

    ID  shift, and go to state 12

    declaration_element            go to state 28
    identifier_declaration         go to state 14
    function_header                go to state 29
    function_prefix                go to state 16
    function_signature             go to state 17
    function_signature_parameters  go to state 18


state 20

    4 program_element: declaration SEMICOLON .

    $default  reduce using rule 4 (program_element)


state 21

   19 function_signature: identifier_declaration PARA_OPEN .

    $default  reduce using rule 19 (function_signature)


state 22

   13 identifier_declaration: identifier_declaration BRACKET_OPEN . expression BRACKET_CLOSE
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 35
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 23

   15 function_definition: type function_header BRACE_OPEN . stmt_list BRACE_CLOSE
   23 stmt_list: .
   24          | . stmt_list stmt

    $default  reduce using rule 23 (stmt_list)

    stmt_list  go to state 39


state 24

   16 function_header: function_prefix PARA_CLOSE .

    $default  reduce using rule 16 (function_header)


state 25

   13 identifier_declaration: . identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE
   14                       | . ID
   22 function_parameter_element: type . identifier_declaration

    ID  shift, and go to state 12

    identifier_declaration  go to state 40


state 26

   21 function_signature_parameters: function_signature function_parameter_element .

    $default  reduce using rule 21 (function_signature_parameters)


state 27

    7 type: . INT
    8     | . VOID
   20 function_signature_parameters: function_signature_parameters COMMA . function_parameter_element
   22 function_parameter_element: . type identifier_declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type                        go to state 25
    function_parameter_element  go to state 41


state 28

    9 declaration: declaration COMMA declaration_element .

    $default  reduce using rule 9 (declaration)


state 29

   12 declaration_element: function_header .

    $default  reduce using rule 12 (declaration_element)


state 30

   54 expression: ID . BRACKET_OPEN primary BRACKET_CLOSE
   59 primary: ID .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, MOD, DIV, MUL, PARA_CLOSE, BRACKET_CLOSE]
   60 function_call: ID . PARA_OPEN
   63 function_call_parameters: ID . PARA_OPEN expression

    PARA_OPEN     shift, and go to state 42
    BRACKET_OPEN  shift, and go to state 43

    $default  reduce using rule 59 (primary)


state 31

   58 primary: NUM .

    $default  reduce using rule 58 (primary)


state 32

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   53           | MINUS . expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 44
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 33

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   41           | LOGICAL_NOT . expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 45
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 34

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   55           | PARA_OPEN . expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 46
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 35

   13 identifier_declaration: identifier_declaration BRACKET_OPEN expression . BRACKET_CLOSE
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    ASSIGN         shift, and go to state 47
    LOGICAL_OR     shift, and go to state 48
    LOGICAL_AND    shift, and go to state 49
    NE             shift, and go to state 50
    EQ             shift, and go to state 51
    GT             shift, and go to state 52
    GTEQ           shift, and go to state 53
    LSEQ           shift, and go to state 54
    LS             shift, and go to state 55
    MINUS          shift, and go to state 56
    PLUS           shift, and go to state 57
    MOD            shift, and go to state 58
    DIV            shift, and go to state 59
    MUL            shift, and go to state 60
    BRACKET_CLOSE  shift, and go to state 61


state 36

   57 expression: primary .

    $default  reduce using rule 57 (expression)


state 37

   56 expression: function_call . PARA_CLOSE

    PARA_CLOSE  shift, and go to state 62


state 38

   61 function_call: function_call_parameters .  [PARA_CLOSE]
   62 function_call_parameters: function_call_parameters . COMMA expression

    COMMA  shift, and go to state 63

    $default  reduce using rule 61 (function_call)


state 39

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   15 function_definition: type function_header BRACE_OPEN stmt_list . BRACE_CLOSE
   24 stmt_list: stmt_list . stmt
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    BRACE_CLOSE  shift, and go to state 70
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 73
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 40

   13 identifier_declaration: identifier_declaration . BRACKET_OPEN expression BRACKET_CLOSE
   22 function_parameter_element: type identifier_declaration .  [COMMA, PARA_CLOSE]

    BRACKET_OPEN  shift, and go to state 22

    $default  reduce using rule 22 (function_parameter_element)


state 41

   20 function_signature_parameters: function_signature_parameters COMMA function_parameter_element .

    $default  reduce using rule 20 (function_signature_parameters)


state 42

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   60              | ID PARA_OPEN .  [PARA_CLOSE]
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression
   63                         | ID PARA_OPEN . expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    $default  reduce using rule 60 (function_call)

    expression                go to state 78
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 43

   54 expression: ID BRACKET_OPEN . primary BRACKET_CLOSE
   58 primary: . NUM
   59        | . ID

    ID   shift, and go to state 79
    NUM  shift, and go to state 31

    primary  go to state 80


state 44

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression
   53           | MINUS expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, MOD, DIV, MUL, PARA_CLOSE, BRACKET_CLOSE]

    $default  reduce using rule 53 (expression)

    Conflict between rule 53 and token ASSIGN resolved as reduce (ASSIGN < UNARY_MINUS).
    Conflict between rule 53 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < UNARY_MINUS).
    Conflict between rule 53 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < UNARY_MINUS).
    Conflict between rule 53 and token NE resolved as reduce (NE < UNARY_MINUS).
    Conflict between rule 53 and token EQ resolved as reduce (EQ < UNARY_MINUS).
    Conflict between rule 53 and token GT resolved as reduce (GT < UNARY_MINUS).
    Conflict between rule 53 and token GTEQ resolved as reduce (GTEQ < UNARY_MINUS).
    Conflict between rule 53 and token LSEQ resolved as reduce (LSEQ < UNARY_MINUS).
    Conflict between rule 53 and token LS resolved as reduce (LS < UNARY_MINUS).
    Conflict between rule 53 and token MINUS resolved as reduce (MINUS < UNARY_MINUS).
    Conflict between rule 53 and token PLUS resolved as reduce (PLUS < UNARY_MINUS).
    Conflict between rule 53 and token MOD resolved as reduce (MOD < UNARY_MINUS).
    Conflict between rule 53 and token DIV resolved as reduce (DIV < UNARY_MINUS).
    Conflict between rule 53 and token MUL resolved as reduce (MUL < UNARY_MINUS).


state 45

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   41           | LOGICAL_NOT expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, MOD, DIV, MUL, PARA_CLOSE, BRACKET_CLOSE]
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    $default  reduce using rule 41 (expression)

    Conflict between rule 41 and token ASSIGN resolved as reduce (ASSIGN < LOGICAL_NOT).
    Conflict between rule 41 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < LOGICAL_NOT).
    Conflict between rule 41 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < LOGICAL_NOT).
    Conflict between rule 41 and token NE resolved as reduce (NE < LOGICAL_NOT).
    Conflict between rule 41 and token EQ resolved as reduce (EQ < LOGICAL_NOT).
    Conflict between rule 41 and token GT resolved as reduce (GT < LOGICAL_NOT).
    Conflict between rule 41 and token GTEQ resolved as reduce (GTEQ < LOGICAL_NOT).
    Conflict between rule 41 and token LSEQ resolved as reduce (LSEQ < LOGICAL_NOT).
    Conflict between rule 41 and token LS resolved as reduce (LS < LOGICAL_NOT).
    Conflict between rule 41 and token MINUS resolved as reduce (MINUS < LOGICAL_NOT).
    Conflict between rule 41 and token PLUS resolved as reduce (PLUS < LOGICAL_NOT).
    Conflict between rule 41 and token MOD resolved as reduce (MOD < LOGICAL_NOT).
    Conflict between rule 41 and token DIV resolved as reduce (DIV < LOGICAL_NOT).
    Conflict between rule 41 and token MUL resolved as reduce (MUL < LOGICAL_NOT).


state 46

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression
   55           | PARA_OPEN expression . PARA_CLOSE

    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    NE           shift, and go to state 50
    EQ           shift, and go to state 51
    GT           shift, and go to state 52
    GTEQ         shift, and go to state 53
    LSEQ         shift, and go to state 54
    LS           shift, and go to state 55
    MINUS        shift, and go to state 56
    PLUS         shift, and go to state 57
    MOD          shift, and go to state 58
    DIV          shift, and go to state 59
    MUL          shift, and go to state 60
    PARA_CLOSE   shift, and go to state 81


state 47

   38 expression: . expression ASSIGN expression
   38           | expression ASSIGN . expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 82
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 48

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   39           | expression LOGICAL_OR . expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 83
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 49

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   40           | expression LOGICAL_AND . expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 84
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 50

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   43           | expression NE . expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 85
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 51

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   42           | expression EQ . expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 86
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 52

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   47           | expression GT . expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 87
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 53

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   46           | expression GTEQ . expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 88
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 54

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   45           | expression LSEQ . expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 89
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 55

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   44           | expression LS . expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 90
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 56

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   49           | expression MINUS . expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 91
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 57

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   48           | expression PLUS . expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 92
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 58

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   52           | expression MOD . expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 93
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 59

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   51           | expression DIV . expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 94
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 60

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   50           | expression MUL . expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 95
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 61

   13 identifier_declaration: identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE .

    $default  reduce using rule 13 (identifier_declaration)


state 62

   56 expression: function_call PARA_CLOSE .

    $default  reduce using rule 56 (expression)


state 63

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   62                         | function_call_parameters COMMA . expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 96
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 64

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   37          | DO . stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 97
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 65

   36 stmt_loop: WHILE . PARA_OPEN expression PARA_CLOSE stmt

    PARA_OPEN  shift, and go to state 98


state 66

   34 stmt_conditional: IF . PARA_OPEN expression PARA_CLOSE stmt
   35                 | IF . PARA_OPEN expression PARA_CLOSE stmt ELSE stmt

    PARA_OPEN  shift, and go to state 99


state 67

   30 stmt: RETURN . expression SEMICOLON
   31     | RETURN . SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    SEMICOLON    shift, and go to state 100
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 101
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 68

   32 stmt: SEMICOLON .

    $default  reduce using rule 32 (stmt)


state 69

   23 stmt_list: .
   24          | . stmt_list stmt
   33 stmt_block: BRACE_OPEN . stmt_list BRACE_CLOSE

    $default  reduce using rule 23 (stmt_list)

    stmt_list  go to state 102


state 70

   15 function_definition: type function_header BRACE_OPEN stmt_list BRACE_CLOSE .

    $default  reduce using rule 15 (function_definition)


state 71

   10 declaration: type . declaration_element
   11 declaration_element: . identifier_declaration
   12                    | . function_header
   13 identifier_declaration: . identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE
   14                       | . ID
   16 function_header: . function_prefix PARA_CLOSE
   17 function_prefix: . function_signature
   18                | . function_signature_parameters
   19 function_signature: . identifier_declaration PARA_OPEN
   20 function_signature_parameters: . function_signature_parameters COMMA function_parameter_element
   21                              | . function_signature function_parameter_element

    ID  shift, and go to state 12

    declaration_element            go to state 13
    identifier_declaration         go to state 14
    function_header                go to state 29
    function_prefix                go to state 16
    function_signature             go to state 17
    function_signature_parameters  go to state 18


state 72

    9 declaration: declaration . COMMA declaration_element
   26 stmt: declaration . SEMICOLON

    COMMA      shift, and go to state 19
    SEMICOLON  shift, and go to state 103


state 73

   24 stmt_list: stmt_list stmt .

    $default  reduce using rule 24 (stmt_list)


state 74

   25 stmt: stmt_block .

    $default  reduce using rule 25 (stmt)


state 75

   28 stmt: stmt_conditional .

    $default  reduce using rule 28 (stmt)


state 76

   29 stmt: stmt_loop .

    $default  reduce using rule 29 (stmt)


state 77

   27 stmt: expression . SEMICOLON
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    SEMICOLON    shift, and go to state 104
    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    NE           shift, and go to state 50
    EQ           shift, and go to state 51
    GT           shift, and go to state 52
    GTEQ         shift, and go to state 53
    LSEQ         shift, and go to state 54
    LS           shift, and go to state 55
    MINUS        shift, and go to state 56
    PLUS         shift, and go to state 57
    MOD          shift, and go to state 58
    DIV          shift, and go to state 59
    MUL          shift, and go to state 60


state 78

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression
   63 function_call_parameters: ID PARA_OPEN expression .  [COMMA, PARA_CLOSE]

    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    NE           shift, and go to state 50
    EQ           shift, and go to state 51
    GT           shift, and go to state 52
    GTEQ         shift, and go to state 53
    LSEQ         shift, and go to state 54
    LS           shift, and go to state 55
    MINUS        shift, and go to state 56
    PLUS         shift, and go to state 57
    MOD          shift, and go to state 58
    DIV          shift, and go to state 59
    MUL          shift, and go to state 60

    $default  reduce using rule 63 (function_call_parameters)


state 79

   59 primary: ID .

    $default  reduce using rule 59 (primary)


state 80

   54 expression: ID BRACKET_OPEN primary . BRACKET_CLOSE

    BRACKET_CLOSE  shift, and go to state 105


state 81

   55 expression: PARA_OPEN expression PARA_CLOSE .

    $default  reduce using rule 55 (expression)


state 82

   38 expression: expression . ASSIGN expression
   38           | expression ASSIGN expression .  [COMMA, SEMICOLON, ASSIGN, PARA_CLOSE, BRACKET_CLOSE]
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    NE           shift, and go to state 50
    EQ           shift, and go to state 51
    GT           shift, and go to state 52
    GTEQ         shift, and go to state 53
    LSEQ         shift, and go to state 54
    LS           shift, and go to state 55
    MINUS        shift, and go to state 56
    PLUS         shift, and go to state 57
    MOD          shift, and go to state 58
    DIV          shift, and go to state 59
    MUL          shift, and go to state 60

    $default  reduce using rule 38 (expression)

    Conflict between rule 38 and token ASSIGN resolved as reduce (%left ASSIGN).
    Conflict between rule 38 and token LOGICAL_OR resolved as shift (ASSIGN < LOGICAL_OR).
    Conflict between rule 38 and token LOGICAL_AND resolved as shift (ASSIGN < LOGICAL_AND).
    Conflict between rule 38 and token NE resolved as shift (ASSIGN < NE).
    Conflict between rule 38 and token EQ resolved as shift (ASSIGN < EQ).
    Conflict between rule 38 and token GT resolved as shift (ASSIGN < GT).
    Conflict between rule 38 and token GTEQ resolved as shift (ASSIGN < GTEQ).
    Conflict between rule 38 and token LSEQ resolved as shift (ASSIGN < LSEQ).
    Conflict between rule 38 and token LS resolved as shift (ASSIGN < LS).
    Conflict between rule 38 and token MINUS resolved as shift (ASSIGN < MINUS).
    Conflict between rule 38 and token PLUS resolved as shift (ASSIGN < PLUS).
    Conflict between rule 38 and token MOD resolved as shift (ASSIGN < MOD).
    Conflict between rule 38 and token DIV resolved as shift (ASSIGN < DIV).
    Conflict between rule 38 and token MUL resolved as shift (ASSIGN < MUL).


state 83

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   39           | expression LOGICAL_OR expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, PARA_CLOSE, BRACKET_CLOSE]
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    LOGICAL_AND  shift, and go to state 49
    NE           shift, and go to state 50
    EQ           shift, and go to state 51
    GT           shift, and go to state 52
    GTEQ         shift, and go to state 53
    LSEQ         shift, and go to state 54
    LS           shift, and go to state 55
    MINUS        shift, and go to state 56
    PLUS         shift, and go to state 57
    MOD          shift, and go to state 58
    DIV          shift, and go to state 59
    MUL          shift, and go to state 60

    $default  reduce using rule 39 (expression)

    Conflict between rule 39 and token ASSIGN resolved as reduce (ASSIGN < LOGICAL_OR).
    Conflict between rule 39 and token LOGICAL_OR resolved as reduce (%left LOGICAL_OR).
    Conflict between rule 39 and token LOGICAL_AND resolved as shift (LOGICAL_OR < LOGICAL_AND).
    Conflict between rule 39 and token NE resolved as shift (LOGICAL_OR < NE).
    Conflict between rule 39 and token EQ resolved as shift (LOGICAL_OR < EQ).
    Conflict between rule 39 and token GT resolved as shift (LOGICAL_OR < GT).
    Conflict between rule 39 and token GTEQ resolved as shift (LOGICAL_OR < GTEQ).
    Conflict between rule 39 and token LSEQ resolved as shift (LOGICAL_OR < LSEQ).
    Conflict between rule 39 and token LS resolved as shift (LOGICAL_OR < LS).
    Conflict between rule 39 and token MINUS resolved as shift (LOGICAL_OR < MINUS).
    Conflict between rule 39 and token PLUS resolved as shift (LOGICAL_OR < PLUS).
    Conflict between rule 39 and token MOD resolved as shift (LOGICAL_OR < MOD).
    Conflict between rule 39 and token DIV resolved as shift (LOGICAL_OR < DIV).
    Conflict between rule 39 and token MUL resolved as shift (LOGICAL_OR < MUL).


state 84

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   40           | expression LOGICAL_AND expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, PARA_CLOSE, BRACKET_CLOSE]
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    NE     shift, and go to state 50
    EQ     shift, and go to state 51
    GT     shift, and go to state 52
    GTEQ   shift, and go to state 53
    LSEQ   shift, and go to state 54
    LS     shift, and go to state 55
    MINUS  shift, and go to state 56
    PLUS   shift, and go to state 57
    MOD    shift, and go to state 58
    DIV    shift, and go to state 59
    MUL    shift, and go to state 60

    $default  reduce using rule 40 (expression)

    Conflict between rule 40 and token ASSIGN resolved as reduce (ASSIGN < LOGICAL_AND).
    Conflict between rule 40 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < LOGICAL_AND).
    Conflict between rule 40 and token LOGICAL_AND resolved as reduce (%left LOGICAL_AND).
    Conflict between rule 40 and token NE resolved as shift (LOGICAL_AND < NE).
    Conflict between rule 40 and token EQ resolved as shift (LOGICAL_AND < EQ).
    Conflict between rule 40 and token GT resolved as shift (LOGICAL_AND < GT).
    Conflict between rule 40 and token GTEQ resolved as shift (LOGICAL_AND < GTEQ).
    Conflict between rule 40 and token LSEQ resolved as shift (LOGICAL_AND < LSEQ).
    Conflict between rule 40 and token LS resolved as shift (LOGICAL_AND < LS).
    Conflict between rule 40 and token MINUS resolved as shift (LOGICAL_AND < MINUS).
    Conflict between rule 40 and token PLUS resolved as shift (LOGICAL_AND < PLUS).
    Conflict between rule 40 and token MOD resolved as shift (LOGICAL_AND < MOD).
    Conflict between rule 40 and token DIV resolved as shift (LOGICAL_AND < DIV).
    Conflict between rule 40 and token MUL resolved as shift (LOGICAL_AND < MUL).


state 85

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   43           | expression NE expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, PARA_CLOSE, BRACKET_CLOSE]
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    GT     shift, and go to state 52
    GTEQ   shift, and go to state 53
    LSEQ   shift, and go to state 54
    LS     shift, and go to state 55
    MINUS  shift, and go to state 56
    PLUS   shift, and go to state 57
    MOD    shift, and go to state 58
    DIV    shift, and go to state 59
    MUL    shift, and go to state 60

    $default  reduce using rule 43 (expression)

    Conflict between rule 43 and token ASSIGN resolved as reduce (ASSIGN < NE).
    Conflict between rule 43 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < NE).
    Conflict between rule 43 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < NE).
    Conflict between rule 43 and token NE resolved as reduce (%left NE).
    Conflict between rule 43 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 43 and token GT resolved as shift (NE < GT).
    Conflict between rule 43 and token GTEQ resolved as shift (NE < GTEQ).
    Conflict between rule 43 and token LSEQ resolved as shift (NE < LSEQ).
    Conflict between rule 43 and token LS resolved as shift (NE < LS).
    Conflict between rule 43 and token MINUS resolved as shift (NE < MINUS).
    Conflict between rule 43 and token PLUS resolved as shift (NE < PLUS).
    Conflict between rule 43 and token MOD resolved as shift (NE < MOD).
    Conflict between rule 43 and token DIV resolved as shift (NE < DIV).
    Conflict between rule 43 and token MUL resolved as shift (NE < MUL).


state 86

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   42           | expression EQ expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, PARA_CLOSE, BRACKET_CLOSE]
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    GT     shift, and go to state 52
    GTEQ   shift, and go to state 53
    LSEQ   shift, and go to state 54
    LS     shift, and go to state 55
    MINUS  shift, and go to state 56
    PLUS   shift, and go to state 57
    MOD    shift, and go to state 58
    DIV    shift, and go to state 59
    MUL    shift, and go to state 60

    $default  reduce using rule 42 (expression)

    Conflict between rule 42 and token ASSIGN resolved as reduce (ASSIGN < EQ).
    Conflict between rule 42 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < EQ).
    Conflict between rule 42 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < EQ).
    Conflict between rule 42 and token NE resolved as reduce (%left NE).
    Conflict between rule 42 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 42 and token GT resolved as shift (EQ < GT).
    Conflict between rule 42 and token GTEQ resolved as shift (EQ < GTEQ).
    Conflict between rule 42 and token LSEQ resolved as shift (EQ < LSEQ).
    Conflict between rule 42 and token LS resolved as shift (EQ < LS).
    Conflict between rule 42 and token MINUS resolved as shift (EQ < MINUS).
    Conflict between rule 42 and token PLUS resolved as shift (EQ < PLUS).
    Conflict between rule 42 and token MOD resolved as shift (EQ < MOD).
    Conflict between rule 42 and token DIV resolved as shift (EQ < DIV).
    Conflict between rule 42 and token MUL resolved as shift (EQ < MUL).


state 87

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   47           | expression GT expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, PARA_CLOSE, BRACKET_CLOSE]
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    MINUS  shift, and go to state 56
    PLUS   shift, and go to state 57
    MOD    shift, and go to state 58
    DIV    shift, and go to state 59
    MUL    shift, and go to state 60

    $default  reduce using rule 47 (expression)

    Conflict between rule 47 and token ASSIGN resolved as reduce (ASSIGN < GT).
    Conflict between rule 47 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < GT).
    Conflict between rule 47 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < GT).
    Conflict between rule 47 and token NE resolved as reduce (NE < GT).
    Conflict between rule 47 and token EQ resolved as reduce (EQ < GT).
    Conflict between rule 47 and token GT resolved as reduce (%left GT).
    Conflict between rule 47 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 47 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 47 and token LS resolved as reduce (%left LS).
    Conflict between rule 47 and token MINUS resolved as shift (GT < MINUS).
    Conflict between rule 47 and token PLUS resolved as shift (GT < PLUS).
    Conflict between rule 47 and token MOD resolved as shift (GT < MOD).
    Conflict between rule 47 and token DIV resolved as shift (GT < DIV).
    Conflict between rule 47 and token MUL resolved as shift (GT < MUL).


state 88

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   46           | expression GTEQ expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, PARA_CLOSE, BRACKET_CLOSE]
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    MINUS  shift, and go to state 56
    PLUS   shift, and go to state 57
    MOD    shift, and go to state 58
    DIV    shift, and go to state 59
    MUL    shift, and go to state 60

    $default  reduce using rule 46 (expression)

    Conflict between rule 46 and token ASSIGN resolved as reduce (ASSIGN < GTEQ).
    Conflict between rule 46 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < GTEQ).
    Conflict between rule 46 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < GTEQ).
    Conflict between rule 46 and token NE resolved as reduce (NE < GTEQ).
    Conflict between rule 46 and token EQ resolved as reduce (EQ < GTEQ).
    Conflict between rule 46 and token GT resolved as reduce (%left GT).
    Conflict between rule 46 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 46 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 46 and token LS resolved as reduce (%left LS).
    Conflict between rule 46 and token MINUS resolved as shift (GTEQ < MINUS).
    Conflict between rule 46 and token PLUS resolved as shift (GTEQ < PLUS).
    Conflict between rule 46 and token MOD resolved as shift (GTEQ < MOD).
    Conflict between rule 46 and token DIV resolved as shift (GTEQ < DIV).
    Conflict between rule 46 and token MUL resolved as shift (GTEQ < MUL).


state 89

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   45           | expression LSEQ expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, PARA_CLOSE, BRACKET_CLOSE]
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    MINUS  shift, and go to state 56
    PLUS   shift, and go to state 57
    MOD    shift, and go to state 58
    DIV    shift, and go to state 59
    MUL    shift, and go to state 60

    $default  reduce using rule 45 (expression)

    Conflict between rule 45 and token ASSIGN resolved as reduce (ASSIGN < LSEQ).
    Conflict between rule 45 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < LSEQ).
    Conflict between rule 45 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < LSEQ).
    Conflict between rule 45 and token NE resolved as reduce (NE < LSEQ).
    Conflict between rule 45 and token EQ resolved as reduce (EQ < LSEQ).
    Conflict between rule 45 and token GT resolved as reduce (%left GT).
    Conflict between rule 45 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 45 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 45 and token LS resolved as reduce (%left LS).
    Conflict between rule 45 and token MINUS resolved as shift (LSEQ < MINUS).
    Conflict between rule 45 and token PLUS resolved as shift (LSEQ < PLUS).
    Conflict between rule 45 and token MOD resolved as shift (LSEQ < MOD).
    Conflict between rule 45 and token DIV resolved as shift (LSEQ < DIV).
    Conflict between rule 45 and token MUL resolved as shift (LSEQ < MUL).


state 90

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   44           | expression LS expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, PARA_CLOSE, BRACKET_CLOSE]
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    MINUS  shift, and go to state 56
    PLUS   shift, and go to state 57
    MOD    shift, and go to state 58
    DIV    shift, and go to state 59
    MUL    shift, and go to state 60

    $default  reduce using rule 44 (expression)

    Conflict between rule 44 and token ASSIGN resolved as reduce (ASSIGN < LS).
    Conflict between rule 44 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < LS).
    Conflict between rule 44 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < LS).
    Conflict between rule 44 and token NE resolved as reduce (NE < LS).
    Conflict between rule 44 and token EQ resolved as reduce (EQ < LS).
    Conflict between rule 44 and token GT resolved as reduce (%left GT).
    Conflict between rule 44 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 44 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 44 and token LS resolved as reduce (%left LS).
    Conflict between rule 44 and token MINUS resolved as shift (LS < MINUS).
    Conflict between rule 44 and token PLUS resolved as shift (LS < PLUS).
    Conflict between rule 44 and token MOD resolved as shift (LS < MOD).
    Conflict between rule 44 and token DIV resolved as shift (LS < DIV).
    Conflict between rule 44 and token MUL resolved as shift (LS < MUL).


state 91

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   49           | expression MINUS expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, PARA_CLOSE, BRACKET_CLOSE]
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    MOD  shift, and go to state 58
    DIV  shift, and go to state 59
    MUL  shift, and go to state 60

    $default  reduce using rule 49 (expression)

    Conflict between rule 49 and token ASSIGN resolved as reduce (ASSIGN < MINUS).
    Conflict between rule 49 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < MINUS).
    Conflict between rule 49 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < MINUS).
    Conflict between rule 49 and token NE resolved as reduce (NE < MINUS).
    Conflict between rule 49 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 49 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 49 and token GTEQ resolved as reduce (GTEQ < MINUS).
    Conflict between rule 49 and token LSEQ resolved as reduce (LSEQ < MINUS).
    Conflict between rule 49 and token LS resolved as reduce (LS < MINUS).
    Conflict between rule 49 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 49 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 49 and token MOD resolved as shift (MINUS < MOD).
    Conflict between rule 49 and token DIV resolved as shift (MINUS < DIV).
    Conflict between rule 49 and token MUL resolved as shift (MINUS < MUL).


state 92

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   48           | expression PLUS expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, PARA_CLOSE, BRACKET_CLOSE]
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    MOD  shift, and go to state 58
    DIV  shift, and go to state 59
    MUL  shift, and go to state 60

    $default  reduce using rule 48 (expression)

    Conflict between rule 48 and token ASSIGN resolved as reduce (ASSIGN < PLUS).
    Conflict between rule 48 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < PLUS).
    Conflict between rule 48 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < PLUS).
    Conflict between rule 48 and token NE resolved as reduce (NE < PLUS).
    Conflict between rule 48 and token EQ resolved as reduce (EQ < PLUS).
    Conflict between rule 48 and token GT resolved as reduce (GT < PLUS).
    Conflict between rule 48 and token GTEQ resolved as reduce (GTEQ < PLUS).
    Conflict between rule 48 and token LSEQ resolved as reduce (LSEQ < PLUS).
    Conflict between rule 48 and token LS resolved as reduce (LS < PLUS).
    Conflict between rule 48 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 48 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 48 and token MOD resolved as shift (PLUS < MOD).
    Conflict between rule 48 and token DIV resolved as shift (PLUS < DIV).
    Conflict between rule 48 and token MUL resolved as shift (PLUS < MUL).


state 93

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression
   52           | expression MOD expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, MOD, DIV, MUL, PARA_CLOSE, BRACKET_CLOSE]

    $default  reduce using rule 52 (expression)

    Conflict between rule 52 and token ASSIGN resolved as reduce (ASSIGN < MOD).
    Conflict between rule 52 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < MOD).
    Conflict between rule 52 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < MOD).
    Conflict between rule 52 and token NE resolved as reduce (NE < MOD).
    Conflict between rule 52 and token EQ resolved as reduce (EQ < MOD).
    Conflict between rule 52 and token GT resolved as reduce (GT < MOD).
    Conflict between rule 52 and token GTEQ resolved as reduce (GTEQ < MOD).
    Conflict between rule 52 and token LSEQ resolved as reduce (LSEQ < MOD).
    Conflict between rule 52 and token LS resolved as reduce (LS < MOD).
    Conflict between rule 52 and token MINUS resolved as reduce (MINUS < MOD).
    Conflict between rule 52 and token PLUS resolved as reduce (PLUS < MOD).
    Conflict between rule 52 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 52 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 52 and token MUL resolved as reduce (%left MUL).


state 94

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   51           | expression DIV expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, MOD, DIV, MUL, PARA_CLOSE, BRACKET_CLOSE]
   52           | expression . MOD expression

    $default  reduce using rule 51 (expression)

    Conflict between rule 51 and token ASSIGN resolved as reduce (ASSIGN < DIV).
    Conflict between rule 51 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < DIV).
    Conflict between rule 51 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < DIV).
    Conflict between rule 51 and token NE resolved as reduce (NE < DIV).
    Conflict between rule 51 and token EQ resolved as reduce (EQ < DIV).
    Conflict between rule 51 and token GT resolved as reduce (GT < DIV).
    Conflict between rule 51 and token GTEQ resolved as reduce (GTEQ < DIV).
    Conflict between rule 51 and token LSEQ resolved as reduce (LSEQ < DIV).
    Conflict between rule 51 and token LS resolved as reduce (LS < DIV).
    Conflict between rule 51 and token MINUS resolved as reduce (MINUS < DIV).
    Conflict between rule 51 and token PLUS resolved as reduce (PLUS < DIV).
    Conflict between rule 51 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 51 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 51 and token MUL resolved as reduce (%left MUL).


state 95

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   50           | expression MUL expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, NE, EQ, GT, GTEQ, LSEQ, LS, MINUS, PLUS, MOD, DIV, MUL, PARA_CLOSE, BRACKET_CLOSE]
   51           | expression . DIV expression
   52           | expression . MOD expression

    $default  reduce using rule 50 (expression)

    Conflict between rule 50 and token ASSIGN resolved as reduce (ASSIGN < MUL).
    Conflict between rule 50 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < MUL).
    Conflict between rule 50 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < MUL).
    Conflict between rule 50 and token NE resolved as reduce (NE < MUL).
    Conflict between rule 50 and token EQ resolved as reduce (EQ < MUL).
    Conflict between rule 50 and token GT resolved as reduce (GT < MUL).
    Conflict between rule 50 and token GTEQ resolved as reduce (GTEQ < MUL).
    Conflict between rule 50 and token LSEQ resolved as reduce (LSEQ < MUL).
    Conflict between rule 50 and token LS resolved as reduce (LS < MUL).
    Conflict between rule 50 and token MINUS resolved as reduce (MINUS < MUL).
    Conflict between rule 50 and token PLUS resolved as reduce (PLUS < MUL).
    Conflict between rule 50 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 50 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 50 and token MUL resolved as reduce (%left MUL).


state 96

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression
   62 function_call_parameters: function_call_parameters COMMA expression .  [COMMA, PARA_CLOSE]

    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    NE           shift, and go to state 50
    EQ           shift, and go to state 51
    GT           shift, and go to state 52
    GTEQ         shift, and go to state 53
    LSEQ         shift, and go to state 54
    LS           shift, and go to state 55
    MINUS        shift, and go to state 56
    PLUS         shift, and go to state 57
    MOD          shift, and go to state 58
    DIV          shift, and go to state 59
    MUL          shift, and go to state 60

    $default  reduce using rule 62 (function_call_parameters)


state 97

   37 stmt_loop: DO stmt . WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON

    WHILE  shift, and go to state 106


state 98

   36 stmt_loop: WHILE PARA_OPEN . expression PARA_CLOSE stmt
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 107
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 99

   34 stmt_conditional: IF PARA_OPEN . expression PARA_CLOSE stmt
   35                 | IF PARA_OPEN . expression PARA_CLOSE stmt ELSE stmt
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 108
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 100

   31 stmt: RETURN SEMICOLON .

    $default  reduce using rule 31 (stmt)


state 101

   30 stmt: RETURN expression . SEMICOLON
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    SEMICOLON    shift, and go to state 109
    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    NE           shift, and go to state 50
    EQ           shift, and go to state 51
    GT           shift, and go to state 52
    GTEQ         shift, and go to state 53
    LSEQ         shift, and go to state 54
    LS           shift, and go to state 55
    MINUS        shift, and go to state 56
    PLUS         shift, and go to state 57
    MOD          shift, and go to state 58
    DIV          shift, and go to state 59
    MUL          shift, and go to state 60


state 102

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   24 stmt_list: stmt_list . stmt
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   33           | BRACE_OPEN stmt_list . BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    BRACE_CLOSE  shift, and go to state 110
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 73
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 103

   26 stmt: declaration SEMICOLON .

    $default  reduce using rule 26 (stmt)


state 104

   27 stmt: expression SEMICOLON .

    $default  reduce using rule 27 (stmt)


state 105

   54 expression: ID BRACKET_OPEN primary BRACKET_CLOSE .

    $default  reduce using rule 54 (expression)


state 106

   37 stmt_loop: DO stmt WHILE . PARA_OPEN expression PARA_CLOSE SEMICOLON

    PARA_OPEN  shift, and go to state 111


state 107

   36 stmt_loop: WHILE PARA_OPEN expression . PARA_CLOSE stmt
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    NE           shift, and go to state 50
    EQ           shift, and go to state 51
    GT           shift, and go to state 52
    GTEQ         shift, and go to state 53
    LSEQ         shift, and go to state 54
    LS           shift, and go to state 55
    MINUS        shift, and go to state 56
    PLUS         shift, and go to state 57
    MOD          shift, and go to state 58
    DIV          shift, and go to state 59
    MUL          shift, and go to state 60
    PARA_CLOSE   shift, and go to state 112


state 108

   34 stmt_conditional: IF PARA_OPEN expression . PARA_CLOSE stmt
   35                 | IF PARA_OPEN expression . PARA_CLOSE stmt ELSE stmt
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    NE           shift, and go to state 50
    EQ           shift, and go to state 51
    GT           shift, and go to state 52
    GTEQ         shift, and go to state 53
    LSEQ         shift, and go to state 54
    LS           shift, and go to state 55
    MINUS        shift, and go to state 56
    PLUS         shift, and go to state 57
    MOD          shift, and go to state 58
    DIV          shift, and go to state 59
    MUL          shift, and go to state 60
    PARA_CLOSE   shift, and go to state 113


state 109

   30 stmt: RETURN expression SEMICOLON .

    $default  reduce using rule 30 (stmt)


state 110

   33 stmt_block: BRACE_OPEN stmt_list BRACE_CLOSE .

    $default  reduce using rule 33 (stmt_block)


state 111

   37 stmt_loop: DO stmt WHILE PARA_OPEN . expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 114
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 112

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   36          | WHILE PARA_OPEN expression PARA_CLOSE . stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 115
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 113

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   34                 | IF PARA_OPEN expression PARA_CLOSE . stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   35                 | IF PARA_OPEN expression PARA_CLOSE . stmt ELSE stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 116
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 114

   37 stmt_loop: DO stmt WHILE PARA_OPEN expression . PARA_CLOSE SEMICOLON
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    NE           shift, and go to state 50
    EQ           shift, and go to state 51
    GT           shift, and go to state 52
    GTEQ         shift, and go to state 53
    LSEQ         shift, and go to state 54
    LS           shift, and go to state 55
    MINUS        shift, and go to state 56
    PLUS         shift, and go to state 57
    MOD          shift, and go to state 58
    DIV          shift, and go to state 59
    MUL          shift, and go to state 60
    PARA_CLOSE   shift, and go to state 117


state 115

   36 stmt_loop: WHILE PARA_OPEN expression PARA_CLOSE stmt .

    $default  reduce using rule 36 (stmt_loop)


state 116

   34 stmt_conditional: IF PARA_OPEN expression PARA_CLOSE stmt .  [DO, WHILE, IF, ELSE, INT, VOID, RETURN, SEMICOLON, BRACE_OPEN, BRACE_CLOSE, ID, NUM, MINUS, LOGICAL_NOT, PARA_OPEN]
   35                 | IF PARA_OPEN expression PARA_CLOSE stmt . ELSE stmt

    ELSE  shift, and go to state 118

    ELSE      [reduce using rule 34 (stmt_conditional)]
    $default  reduce using rule 34 (stmt_conditional)


state 117

   37 stmt_loop: DO stmt WHILE PARA_OPEN expression PARA_CLOSE . SEMICOLON

    SEMICOLON  shift, and go to state 119


state 118

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   35                 | IF PARA_OPEN expression PARA_CLOSE stmt ELSE . stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    MINUS        shift, and go to state 32
    LOGICAL_NOT  shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 120
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 119

   37 stmt_loop: DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON .

    $default  reduce using rule 37 (stmt_loop)


state 120

   35 stmt_conditional: IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt .

    $default  reduce using rule 35 (stmt_conditional)
